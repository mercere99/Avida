========== Traits ========
On birth, how are traits handled?
- Reset to default value
- Copy from parent
- Backup parent value AND reset current value to default
- Backup parent value AND start copy parent value as current

Built-in traits: (these should be in ALL organisms)
- id: a unique ID for each organism, never repeated during a run
- generation: How many reproduction steps back to injected ancestor?
- birth_update: What update was this organism created?

- parent_id?

Common traits:
- merit (from environment): setting for the metabolic rate of an organism


Traits for Avida-style organisms only:
- copied_size: How many instructions were copied into this organism (rest are default)
- exe_size: How many instructions were executed in the parent?


========= Virtual CPUs ===========
=> AvidaVM

6 Stacks - Stack A through Stack F
6 Heads -
  A: Instruction Pointer,
  B: Genome Read (initialized at start of genome)
  C: Genome Write (initialize at end of genome, where offspring goes)
  D: Memory Read (initialized at beginning of memory)
  E: Memory Write (initialized at beginning of memory)
  F: Flow Control (initialized at start of genome)
6 Values Nop-A=1, B=2, C=16, D=256, E=0, F=-1
6 Scopes - Nop-A is global scope, other Nops are progressively deeper

Instruction set:
Nop-A
Nop-B
Nop-C
Nop-D
Nop-E
Nop-F

Const    : Push value X[Nop-A] onto Stack Y[Nop-A]
Not      : Pop[Nop-A]:X ; Push[Arg1] !X
Shift    : Pop[Nop-A]:X ; Pop[Arg1]:Y ; Push[Arg1] X<<Y
Add      : Pop[Nop-A]:X ; Pop[Arg1]:Y ; Push[Arg1] X + Y
Sub      : Pop[Nop-A]:X ; Pop[Arg1]:Y ; Push[Arg1] X - Y
Mult     : Pop[Nop-A]:X ; Pop[Arg1]:Y ; Push[Arg1] X * Y
Div      : Pop[Nop-A]:X ; Pop[Arg1]:Y ; Push[Arg1] X / Y
Mod      : Pop[Nop-A]:X ; Pop[Arg1]:Y ; Push[Arg1] X % Y
Exp      : Pop[Nop-A]:X ; Pop[Arg1]:Y ; Push[Arg1] X ** Y
Sort     : Pop[Nop-A]:X ; Pop[Arg1]:Y ; Push[Arg1] X,Y if X>Y else Y,X
TestLess : Pop[Nop-A]:X ; Pop[Arg1]:Y ; Push[Arg1] X < Y
TestEqu  : Pop[Nop-A]:X ; Pop[Arg1]:Y ; Push[Arg1] X == Y

Nand     : Pop[Nop-A]:X ; Pop[Arg1]:Y ; Push[Arg1] ~(X&Y)  (bitwise)
Xor      : Pop[Nop-A]:X ; Pop[Arg1]:Y ; Push[Arg1] X ^ Y   (bitwise)

If         : Pop[Nop-A]:X ; if X == 0, skip next instruction
Scope      : Change current Scope to [Nop-A]. If current Scope <= previous, end prev Scope.
Break      : Advance to end of Scope [Current]
Continue   : Restart Scope [Current]

StackPop  : Discard top entry from [Nop-A] X
StackDup  : Read top of Stack [Nop-A] (no popping) and push a copy on [Arg1]
StackSwap : Pop[Nop-A]:X ; Pop[Arg1]:Y; push X on Stack [Arg2]; push Y on Stack [Arg1]
StackMove : Pop[Nop-A]:X and Push[Arg1+1] X

Copy       : Copy the value from Head [Nop-B] to Head [Arg1+1], advancing both
Load       : Read value at Head [Nop-D]:X ; Push X onto stack [Nop-A] ; advance Head.
Store      : Pop[Nop-A] and write the value into Head [NopE] ; advance Head.
DivideCell : Split off allocated space.

HeadPos    : Push the position of Head[Nop-F] onto stack [Nop-A]
SetHead    : Pop stack [Nop-A] and move head[Nop-F] to that position.
JumpHead   : Jump Head[Nop-A] to head[Nop-F]
OffsetHead : Shift Head[Nop-F] by the value of Pop[Nop-A]
